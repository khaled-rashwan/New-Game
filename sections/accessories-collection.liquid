{% comment %}
  Accessories Collection Template - Shopify
  Save this as: sections/accessories-collection.liquid
{% endcomment %}

<div class="accessories-collection">
  <div class="collection-wrapper">
    
    <!-- Collection Header -->
    <div class="collection-heading">
      <h1 class="collection-title">{{ section.settings.collection_title }}</h1>
      <p class="collection-description">{{ section.settings.collection_description }}</p>
    </div>

    <!-- Controls Bar -->
    <div class="controls-bar">
      <p class="products-count">Showing {{ collection.products_count }} products</p>
      <select class="sort-select" id="sortSelect">
        <option value="popularity">Popularity</option>
        <option value="price-low">Price: Low to High</option>
        <option value="price-high">Price: High to Low</option>
        <option value="rating">Rating</option>
        <option value="newest">Newest</option>
      </select>
    </div>

    <!-- Category Filter Tabs -->
    <div class="category-filter-tabs">
      <button class="filter-tab active" data-category="all">{{ section.settings.tab_all }}</button>
      <button class="filter-tab" data-category="apparel">{{ section.settings.tab_apparel }}</button>
      <button class="filter-tab" data-category="gaming-gear">{{ section.settings.tab_gaming }}</button>
      <button class="filter-tab" data-category="storage">{{ section.settings.tab_storage }}</button>
    </div>

    <!-- Products Grid -->
    <div class="products-grid" id="productsGrid">
      {% for product in collection.products %}
        <div class="product-item" 
             data-price="{{ product.price | money_without_currency | remove: ',' | remove: ' ' }}"
             data-category="{{ product.tags | join: ',' | downcase }}"
             data-rating="{{ product.metafields.custom.rating | default: 4.5 }}">
          
          <!-- Save Badge -->
          {% if product.compare_at_price > product.price %}
            {% assign savings = product.compare_at_price | minus: product.price %}
            <span class="save-badge">Save {{ savings | money }}</span>
          {% endif %}

          <!-- Wishlist Button -->
          <button class="wishlist-button" onclick="toggleWishlist({{ product.id }})">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
            </svg>
          </button>

          <!-- Product Image -->
          <a href="{{ product.url }}" class="product-image-link">
            <div class="product-image">
              {% if product.featured_image %}
                <img src="{{ product.featured_image | img_url: '400x' }}" 
                     alt="{{ product.title }}"
                     width="400"
                     height="400"
                     loading="lazy" />
              {% else %}
                <div class="placeholder-img">
                  <svg width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="#d1d5db" stroke-width="1">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                    <circle cx="8.5" cy="8.5" r="1.5"></circle>
                    <polyline points="21 15 16 10 5 21"></polyline>
                  </svg>
                </div>
              {% endif %}
            </div>
          </a>

          <!-- Product Details -->
          <div class="product-details">
            <h3 class="product-title">
              <a href="{{ product.url }}">{{ product.title }}</a>
            </h3>

            <p class="product-short-desc">{{ product.metafields.custom.short_description | default: product.description | truncate: 60 }}</p>

            <!-- Rating and Category -->
            <div class="product-meta">
              <div class="rating-wrapper">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="#FFC107" stroke="none">
                  <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                </svg>
                <span class="rating-value">{{ product.metafields.custom.rating | default: 4.5 }}</span>
                <span class="rating-count">({{ product.metafields.custom.reviews_count | default: 100 }})</span>
              </div>
              {% assign product_type = product.metafields.custom.product_type | default: product.type %}
              {% if product_type != blank %}
                <span class="product-category-tag">{{ product_type }}</span>
              {% endif %}
            </div>

            <!-- Sizes -->
            {% if product.metafields.custom.available_sizes %}
              <div class="product-sizes">
                <span class="sizes-label">Sizes:</span>
                <span class="sizes-value">{{ product.metafields.custom.available_sizes }}</span>
              </div>
            {% endif %}

            <!-- Price and Add to Cart -->
            <div class="price-cart-row">
              <div class="price-section">
                <span class="current-price">{{ product.price | money }}</span>
                {% if product.compare_at_price > product.price %}
                  <span class="original-price">{{ product.compare_at_price | money }}</span>
                {% endif %}
              </div>

              <button class="add-btn" onclick="addToCart({{ product.variants.first.id }})" {% unless product.available %}disabled{% endunless %}>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="9" cy="21" r="1"></circle>
                  <circle cx="20" cy="21" r="1"></circle>
                  <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
                </svg>
                Add
              </button>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
</div>

<style>
/* Base Styles */
.accessories-collection {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica', 'Arial', sans-serif;
  -webkit-font-smoothing: antialiased;
  background: #ffffff;
}

.accessories-collection * {
  box-sizing: border-box;
}

.collection-wrapper {
  max-width: 1400px;
  margin: 0 auto;
  padding: 40px 24px;
}

/* Collection Header */
.collection-heading {
  margin-bottom: 32px;
}

.collection-title {
  font-size: 36px;
  font-weight: 700;
  margin: 0 0 8px 0;
  color: #111827;
  letter-spacing: -0.5px;
}

.collection-description {
  font-size: 16px;
  color: #6b7280;
  margin: 0;
  line-height: 1.5;
}

/* Controls Bar */
.controls-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
  flex-wrap: wrap;
  gap: 16px;
}

.products-count {
  font-size: 14px;
  color: #6b7280;
  margin: 0;
  font-weight: 500;
}

.sort-select {
  padding: 10px 36px 10px 14px;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  background: white url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23374151' stroke-width='2'%3E%3Cpolyline points='6 9 12 15 18 9'/%3E%3C/svg%3E") no-repeat right 12px center;
  appearance: none;
  outline: none;
  color: #374151;
  font-family: inherit;
  min-width: 180px;
}

.sort-select:focus {
  border-color: #9ca3af;
}

/* Category Filter Tabs */
.category-filter-tabs {
  display: flex;
  gap: 12px;
  margin-bottom: 32px;
  border-bottom: 1px solid #e5e7eb;
  overflow-x: auto;
  scrollbar-width: none;
}

.category-filter-tabs::-webkit-scrollbar {
  display: none;
}

.filter-tab {
  padding: 14px 24px;
  background: transparent;
  border: none;
  font-size: 15px;
  font-weight: 500;
  color: #6b7280;
  cursor: pointer;
  position: relative;
  transition: color 0.2s;
  white-space: nowrap;
  font-family: inherit;
  border-bottom: 3px solid transparent;
  margin-bottom: -1px;
}

.filter-tab:hover {
  color: #111827;
}

.filter-tab.active {
  color: #111827;
  border-bottom-color: #111827;
}

/* Products Grid */
.products-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
  gap: 24px;
}

.product-item {
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 12px;
  overflow: hidden;
  position: relative;
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
}

.product-item:hover {
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
  transform: translateY(-2px);
  border-color: #d1d5db;
}

/* Save Badge */
.save-badge {
  position: absolute;
  top: 12px;
  left: 12px;
  background: #ef4444;
  color: white;
  padding: 5px 10px;
  border-radius: 6px;
  font-size: 12px;
  font-weight: 700;
  z-index: 2;
  letter-spacing: 0.3px;
}

/* Wishlist Button */
.wishlist-button {
  position: absolute;
  top: 12px;
  right: 12px;
  z-index: 2;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  border: none;
  background: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: all 0.2s;
  color: #6b7280;
}

.wishlist-button:hover {
  background: #fef2f2;
  color: #ef4444;
  transform: scale(1.05);
}

.wishlist-button.active svg {
  fill: #ef4444;
  stroke: #ef4444;
}

/* Product Image */
.product-image-link {
  display: block;
  text-decoration: none;
}

.product-image {
  width: 100%;
  aspect-ratio: 1;
  background: #f9fafb;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.product-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.4s ease;
}

.product-item:hover .product-image img {
  transform: scale(1.05);
}

.placeholder-img {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #f9fafb 0%, #f3f4f6 100%);
}

/* Product Details */
.product-details {
  padding: 16px;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.product-title {
  font-size: 16px;
  font-weight: 600;
  margin: 0 0 8px 0;
  line-height: 1.3;
}

.product-title a {
  color: #111827;
  text-decoration: none;
  transition: color 0.2s;
}

.product-title a:hover {
  color: #6b7280;
}

.product-short-desc {
  font-size: 14px;
  color: #6b7280;
  margin: 0 0 12px 0;
  line-height: 1.5;
}

/* Product Meta */
.product-meta {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
  gap: 8px;
}

.rating-wrapper {
  display: flex;
  align-items: center;
  gap: 4px;
}

.rating-value {
  font-size: 14px;
  font-weight: 600;
  color: #111827;
}

.rating-count {
  font-size: 13px;
  color: #9ca3af;
}

.product-category-tag {
  font-size: 12px;
  padding: 4px 10px;
  background: #f3f4f6;
  color: #6b7280;
  border-radius: 6px;
  font-weight: 600;
  white-space: nowrap;
}

/* Sizes */
.product-sizes {
  font-size: 13px;
  color: #6b7280;
  margin-bottom: 12px;
}

.sizes-label {
  font-weight: 600;
  color: #374151;
}

.sizes-value {
  margin-left: 4px;
}

/* Price and Cart */
.price-cart-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 12px;
  margin-top: auto;
}

.price-section {
  display: flex;
  align-items: center;
  gap: 8px;
  flex-wrap: wrap;
}

.current-price {
  font-size: 20px;
  font-weight: 700;
  color: #111827;
}

.original-price {
  font-size: 14px;
  color: #9ca3af;
  text-decoration: line-through;
}

.add-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
  padding: 10px 18px;
  background: #000;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s;
  white-space: nowrap;
  font-family: inherit;
}

.add-btn:hover:not(:disabled) {
  background: #1f2937;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.add-btn:disabled {
  background: #9ca3af;
  cursor: not-allowed;
}

/* Responsive */
@media (max-width: 1024px) {
  .products-grid {
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    gap: 20px;
  }
}

@media (max-width: 768px) {
  .collection-wrapper {
    padding: 32px 16px;
  }

  .collection-title {
    font-size: 28px;
  }

  .collection-description {
    font-size: 15px;
  }

  .controls-bar {
    flex-direction: column;
    align-items: flex-start;
  }

  .sort-select {
    width: 100%;
  }

  .products-grid {
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 16px;
  }

  .filter-tab {
    padding: 12px 20px;
    font-size: 14px;
  }
}

@media (max-width: 480px) {
  .products-grid {
    grid-template-columns: 1fr 1fr;
    gap: 12px;
  }

  .product-title {
    font-size: 14px;
  }

  .current-price {
    font-size: 18px;
  }

  .add-btn {
    padding: 8px 14px;
    font-size: 13px;
  }

  .product-short-desc {
    font-size: 13px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  
  // Category filter tabs
  const filterTabs = document.querySelectorAll('.filter-tab');
  const productItems = document.querySelectorAll('.product-item');
  
  filterTabs.forEach(tab => {
    tab.addEventListener('click', function() {
      filterTabs.forEach(t => t.classList.remove('active'));
      this.classList.add('active');
      
      const category = this.dataset.category;
      
      productItems.forEach(item => {
        const itemCategories = item.dataset.category.toLowerCase();
        
        if (category === 'all' || itemCategories.includes(category)) {
          item.style.display = 'flex';
        } else {
          item.style.display = 'none';
        }
      });
      
      updateProductCount();
    });
  });

  // Sort functionality
  const sortSelect = document.getElementById('sortSelect');
  
  if (sortSelect) {
    sortSelect.addEventListener('change', function() {
      const sortValue = this.value;
      const grid = document.getElementById('productsGrid');
      const items = Array.from(productItems);
      
      items.sort((a, b) => {
        switch(sortValue) {
          case 'price-low':
            return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
          case 'price-high':
            return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
          case 'rating':
            return parseFloat(b.dataset.rating) - parseFloat(a.dataset.rating);
          default:
            return 0;
        }
      });
      
      items.forEach(item => grid.appendChild(item));
    });
  }

  // Update product count
  function updateProductCount() {
    const visibleItems = Array.from(productItems).filter(item => item.style.display !== 'none');
    const countElement = document.querySelector('.products-count');
    if (countElement) {
      countElement.textContent = 'Showing ' + visibleItems.length + ' products';
    }
  }

  // Load wishlist state
  const wishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
  document.querySelectorAll('.wishlist-button').forEach(btn => {
    const productId = parseInt(btn.getAttribute('onclick').match(/\d+/)[0]);
    if (wishlist.includes(productId)) {
      btn.classList.add('active');
    }
  });
});

// Wishlist toggle
function toggleWishlist(productId) {
  const btn = event.currentTarget;
  btn.classList.toggle('active');
  
  let wishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
  const index = wishlist.indexOf(productId);
  
  if (index > -1) {
    wishlist.splice(index, 1);
  } else {
    wishlist.push(productId);
  }
  
  localStorage.setItem('wishlist', JSON.stringify(wishlist));
}

// Add to cart
function addToCart(variantId) {
  fetch('/cart/add.js', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      id: variantId,
      quantity: 1
    })
  })
  .then(response => response.json())
  .then(data => {
    console.log('Added to cart:', data);
    alert('Product added to cart!');
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Error adding to cart. Please try again.');
  });
}
</script>

{% schema %}
{
  "name": "Accessories Collection",
  "settings": [
    {
      "type": "header",
      "content": "Collection Header"
    },
    {
      "type": "text",
      "id": "collection_title",
      "label": "Collection Title",
      "default": "Gaming Accessories"
    },
    {
      "type": "textarea",
      "id": "collection_description",
      "label": "Collection Description",
      "default": "Enhance your gaming experience with our premium accessories"
    },
    {
      "type": "header",
      "content": "Category Tabs"
    },
    {
      "type": "text",
      "id": "tab_all",
      "label": "All Tab Text",
      "default": "All Accessories"
    },
    {
      "type": "text",
      "id": "tab_apparel",
      "label": "Apparel Tab Text",
      "default": "Apparel"
    },
    {
      "type": "text",
      "id": "tab_gaming",
      "label": "Gaming Gear Tab Text",
      "default": "Gaming Gear"
    },
    {
      "type": "text",
      "id": "tab_storage",
      "label": "Storage Tab Text",
      "default": "Storage"
    }
  ],
  "presets": [
    {
      "name": "Accessories Collection"
    }
  ]
}
{% endschema %}